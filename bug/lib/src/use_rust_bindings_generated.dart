// Copyright (c) 2023, the Dart project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/use_rust.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class UseRustBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  UseRustBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  UseRustBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int InitializeApiDL(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _InitializeApiDL(
      data,
    );
  }

  late final _InitializeApiDLPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>(
          'InitializeApiDL');
  late final _InitializeApiDL =
      _InitializeApiDLPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> NewPersistentHandle(
    Object non_persistent_handle,
  ) {
    return _NewPersistentHandle(
      non_persistent_handle,
    );
  }

  late final _NewPersistentHandlePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Handle)>>(
          'NewPersistentHandle');
  late final _NewPersistentHandle = _NewPersistentHandlePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(Object)>();

  Object HandleFromPersistent(
    ffi.Pointer<ffi.Void> persistent_handle,
  ) {
    return _HandleFromPersistent(
      persistent_handle,
    );
  }

  late final _HandleFromPersistentPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.Pointer<ffi.Void>)>>(
          'HandleFromPersistent');
  late final _HandleFromPersistent = _HandleFromPersistentPtr.asFunction<
      Object Function(ffi.Pointer<ffi.Void>)>();
}
